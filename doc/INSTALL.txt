
BUILDING
~~~~~~~~
We now have two options to build QDecimal project.
A) SCons based build
B) Qmake/Make based build.

CMake is now the preferred method of building and available accross all platforms.
Recommended build and test steps (starting at the project root)

mkdir build
cd build
cmake ..
cmake --build . -v
ctest -C <config> -V  [Where config=Debug etc.]



Qmake/Make based build is now deprecated, please use it as a last resort as
it will be discontinued near future:

SCons build is now abondoned and no longer functional.
Nevertheless, you can type "scons" at the project root to build. type scons -h or -H to
see full options for build.


Unix
~~~~
qmake -r
make

Use "make clean" to clean up intermediate (object etc.) files.
Use "make distclean" to return to clean state.

Windows
~~~~~~~
qmake -r
nmake

Use "nmake clean" to clean up intermediate (object etc.) files.
Use "nmake distclean" to return to clean state.

TESTING
~~~~~~~
Execute the "qdecimal_test" application in the bin directory, ie. "cd bin".

To execute the subset of the tests, just run
"qdecimal_test --testdir=tc_subset".

To execute the full set of the tests, just run
"qdecimal_test --testdir=tc_full".

Full test would have only 2 expected (fma) failures, whereas subset 
test should not have any failure (grep -i fail / grep PASS).

SHARED LIBRARY
~~~~~~~~~~~~~~
a) Comment "CONFIG += static" line and uncomment the two lines 
beginning with "CONFIG += shared"
in src/src.pro file.

b) In the client applications simply define QDECIMAL_SHARED macro as 1;
that is "DEFINES += QDECIMAL_SHARED=1"

c) At run-time, PATH (Windows) or LD_LIBRARY_PATH (Unix) environment
variables should be specified to locate the shared library.
